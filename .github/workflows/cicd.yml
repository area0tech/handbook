name: Build

env:
  # Use docker.io for Docker Hub if empty
  IMAGE_NAME: area0/${{ github.repository }}

on:
  push:
    branches: [ $default-branch ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

jobs:
  Build-Docker-Image:
    runs-on: ubuntu-latest
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.area0.tech
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              secrets/data/area0/docker-registry host | REGISTRY_HOST ;
              secrets/data/area0/docker-registry username | REGISTRY_USERNAME ;
              secrets/data/area0/docker-registry password | REGISTRY_PASSWORD

      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up Docker Context for Buildx
        run: docker context create builders

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ steps.secrets.outputs.REGISTRY_HOST }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.secrets.outputs.REGISTRY_HOST }}
          username: ${{ steps.secrets.outputs.REGISTRY_USERNAME }}
          password: ${{ steps.secrets.outputs.REGISTRY_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.secrets.outputs.REGISTRY_HOST }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  Deploy-to-Kubernetes:
    needs: Build-Docker-Image
    runs-on: ubuntu-latest
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.area0.tech
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              secrets/data/area0/docker-registry host | REGISTRY_HOST ;
              secrets/data/area0/docker-registry username | REGISTRY_USERNAME ;
              secrets/data/area0/docker-registry password | REGISTRY_PASSWORD ;
              secrets/data/area0/kubeconfig-area0 kubeconfig | KUBECONF

      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Create kube config
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ steps.secrets.outputs.KUBECONF }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Install helm
        run: |
          curl -LO https://get.helm.sh/helm-v3.11.0-linux-amd64.tar.gz
          tar -zxvf helm-v3.11.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          helm version

      - name: Deploy
        run: |
          helm upgrade handbook ./helm-chart --install --namespace=area0 --set image=${{ steps.secrets.outputs.REGISTRY_HOST }}/${{ env.IMAGE_NAME }}:${GITHUB_REF_NAME} --set imageCredentials.registry='${{ steps.secrets.outputs.REGISTRY_HOST }}' --set imageCredentials.username='${{ steps.secrets.outputs.REGISTRY_USERNAME }}' --set imageCredentials.password='${{ steps.secrets.outputs.REGISTRY_PASSWORD }}' --set imageCredentials.email='null@null.com'
